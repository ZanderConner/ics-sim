PROGRAM programTest
  VAR
    UINT16_1148 : UINT;
    UINT16_2305 : UINT;
    DWORD_4188 : DWORD;
    REAL_4188 : REAL;
    _alive : BOOL := FALSE;
  END_VAR
  VAR_EXTERNAL
    HR1148 : WORD;
    HR2305 : WORD;
    HR4188_H : WORD;
    HR4188_L : WORD;
  END_VAR

  (* Assume global HR1148, HR2305, HR4188_H, HR4188_L are updated via Modbus *)
  (* and local UINT16_1148, UINT16_2305, DWORD_4188, REAL_4188, _alive are declared *)

  VAR
      TempUDINT : UDINT;  (* temporary 32-bit unsigned for calculations *)
  END_VAR

  (* 1. Convert 16-bit WORD holding registers to 16-bit UINTs *)
  UINT16_1148 := WORD_TO_UINT(HR1148);
  UINT16_2305 := WORD_TO_UINT(HR2305);

  (* 2. Combine high and low WORDs into a 32-bit unsigned integer *)
  TempUDINT := WORD_TO_UDINT(HR4188_H) * 65536 + WORD_TO_UDINT(HR4188_L);
  (* 3. Convert the 32-bit value to DWORD (bitwise representation) and to REAL (numeric floating-point) *)
  DWORD_4188 := UDINT_TO_DWORD(TempUDINT);
  REAL_4188  := UDINT_TO_REAL(TempUDINT);

  (* 4. Set heartbeat flag *)
  _alive := TRUE;
END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    VAR_GLOBAL
      HR1148 AT %IW0 : WORD;
      HR2305 AT %IW1157 : WORD;
      HR4188_H AT %IW3040 : WORD;
      HR4188_L AT %IW3041 : WORD;
    END_VAR
    TASK MainTask(INTERVAL := T#100ms,PRIORITY := 1);
    PROGRAM MainInst WITH MainTask : programTest;
  END_RESOURCE
END_CONFIGURATION

(*DBG:char md5[] = "b236f6b753e7bd5990399c2c258cf552";*)
(*DBG:/**)
(*DBG: * This file is part of OpenPLC Runtime*)
(*DBG: **)
(*DBG: * Copyright (C) 2023 Autonomy, GP Orcullo*)
(*DBG: * Based on the work by GP Orcullo on Beremiz for uC*)
(*DBG: **)
(*DBG: * This program is free software; you can redistribute it and/or*)
(*DBG: * modify it under the terms of the GNU General Public License*)
(*DBG: * as published by the Free Software Foundation; either version 2*)
(*DBG: * of the License, or (at your option) any later version.*)
(*DBG: **)
(*DBG: * This program is distributed in the hope that it will be useful,*)
(*DBG: * but WITHOUT ANY WARRANTY; without even the implied warranty of*)
(*DBG: * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*)
(*DBG: * GNU General Public License for more details.*)
(*DBG: **)
(*DBG: * You should have received a copy of the GNU General Public License*)
(*DBG: * along with this program; If not, see <http://www.gnu.org/licenses/>.*)
(*DBG: **)
(*DBG: */*)
(*DBG:*)
(*DBG:#include <stdbool.h>*)
(*DBG:*)
(*DBG:#include "iec_types_all.h"*)
(*DBG:#include "POUS.h"*)
(*DBG:*)
(*DBG:#define SAME_ENDIANNESS      0*)
(*DBG:#define REVERSE_ENDIANNESS   1*)
(*DBG:*)
(*DBG:uint8_t endianness;*)
(*DBG:*)
(*DBG:*)
(*DBG:extern __IEC_WORD_t RES0__HR1148;*)
(*DBG:extern __IEC_WORD_t RES0__HR2305;*)
(*DBG:extern __IEC_WORD_t RES0__HR4188_H;*)
(*DBG:extern __IEC_WORD_t RES0__HR4188_L;*)
(*DBG:extern PROGRAMTEST RES0__MAININST;*)
(*DBG:*)
(*DBG:static const struct {*)
(*DBG:    void *ptr;*)
(*DBG:    __IEC_types_enum type;*)
(*DBG:} debug_vars[] = {*)
(*DBG:    {&(RES0__HR1148), WORD_ENUM},*)
(*DBG:    {&(RES0__HR2305), WORD_ENUM},*)
(*DBG:    {&(RES0__HR4188_H), WORD_ENUM},*)
(*DBG:    {&(RES0__HR4188_L), WORD_ENUM},*)
(*DBG:    {&(RES0__MAININST.UINT16_1148), UINT_ENUM},*)
(*DBG:    {&(RES0__MAININST.UINT16_2305), UINT_ENUM},*)
(*DBG:    {&(RES0__MAININST.DWORD_4188), DWORD_ENUM},*)
(*DBG:    {&(RES0__MAININST.REAL_4188), REAL_ENUM},*)
(*DBG:    {&(RES0__MAININST._ALIVE), BOOL_ENUM},*)
(*DBG:    {&(RES0__MAININST.HR1148), WORD_P_ENUM},*)
(*DBG:    {&(RES0__MAININST.HR2305), WORD_P_ENUM},*)
(*DBG:    {&(RES0__MAININST.HR4188_H), WORD_P_ENUM},*)
(*DBG:    {&(RES0__MAININST.HR4188_L), WORD_P_ENUM},*)
(*DBG:    {&(RES0__MAININST.TEMPUDINT), UDINT_ENUM},*)
(*DBG:};*)
(*DBG:*)
(*DBG:#define VAR_COUNT               14*)
(*DBG:*)
(*DBG:uint16_t get_var_count(void)*)
(*DBG:{*)
(*DBG:    return VAR_COUNT;*)
(*DBG:}*)
(*DBG:*)
(*DBG:size_t get_var_size(size_t idx)*)
(*DBG:{*)
(*DBG:    if (idx >= VAR_COUNT)*)
(*DBG:    {*)
(*DBG:        return 0;*)
(*DBG:    }*)
(*DBG:    switch (debug_vars[idx].type) {*)
(*DBG:    case UDINT_ENUM:*)
(*DBG:        return sizeof(UDINT);*)
(*DBG:    case REAL_ENUM:*)
(*DBG:        return sizeof(REAL);*)
(*DBG:    case UINT_ENUM:*)
(*DBG:        return sizeof(UINT);*)
(*DBG:    case BOOL_ENUM:*)
(*DBG:        return sizeof(BOOL);*)
(*DBG:    case DWORD_ENUM:*)
(*DBG:        return sizeof(DWORD);*)
(*DBG:    case WORD_ENUM:*)
(*DBG:    case WORD_P_ENUM:*)
(*DBG:        return sizeof(WORD);*)
(*DBG:    default:*)
(*DBG:        return 0;*)
(*DBG:    }*)
(*DBG:}*)
(*DBG:*)
(*DBG:void *get_var_addr(size_t idx)*)
(*DBG:{*)
(*DBG:    void *ptr = debug_vars[idx].ptr;*)
(*DBG:*)
(*DBG:    switch (debug_vars[idx].type) {*)
(*DBG:    case UDINT_ENUM:*)
(*DBG:        return (void *)&((__IEC_UDINT_t *) ptr)->value;*)
(*DBG:    case REAL_ENUM:*)
(*DBG:        return (void *)&((__IEC_REAL_t *) ptr)->value;*)
(*DBG:    case UINT_ENUM:*)
(*DBG:        return (void *)&((__IEC_UINT_t *) ptr)->value;*)
(*DBG:    case BOOL_ENUM:*)
(*DBG:        return (void *)&((__IEC_BOOL_t *) ptr)->value;*)
(*DBG:    case DWORD_ENUM:*)
(*DBG:        return (void *)&((__IEC_DWORD_t *) ptr)->value;*)
(*DBG:    case WORD_ENUM:*)
(*DBG:        return (void *)&((__IEC_WORD_t *) ptr)->value;*)
(*DBG:    case WORD_P_ENUM:*)
(*DBG:        return (void *)((((__IEC_WORD_p *) ptr)->flags & __IEC_FORCE_FLAG) *)
(*DBG:                        ? &(((__IEC_WORD_p *) ptr)->fvalue) *)
(*DBG:                        : ((__IEC_WORD_p *) ptr)->value);*)
(*DBG:    default:*)
(*DBG:        return 0;*)
(*DBG:    }*)
(*DBG:}*)
(*DBG:*)
(*DBG:void force_var(size_t idx, bool forced, void *val)*)
(*DBG:{*)
(*DBG:    void *ptr = debug_vars[idx].ptr;*)
(*DBG:*)
(*DBG:    if (forced) {*)
(*DBG:        size_t var_size = get_var_size(idx);*)
(*DBG:        switch (debug_vars[idx].type) {*)
(*DBG:        case UDINT_ENUM: {*)
(*DBG:            memcpy(&((__IEC_UDINT_t *) ptr)->value, val, var_size);*)
(*DBG:            //((__IEC_UDINT_t *) ptr)->value = *((UDINT *) val);*)
(*DBG:            ((__IEC_UDINT_t *) ptr)->flags |= __IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        }*)
(*DBG:        case REAL_ENUM: {*)
(*DBG:            memcpy(&((__IEC_REAL_t *) ptr)->value, val, var_size);*)
(*DBG:            //((__IEC_REAL_t *) ptr)->value = *((REAL *) val);*)
(*DBG:            ((__IEC_REAL_t *) ptr)->flags |= __IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        }*)
(*DBG:        case UINT_ENUM: {*)
(*DBG:            memcpy(&((__IEC_UINT_t *) ptr)->value, val, var_size);*)
(*DBG:            //((__IEC_UINT_t *) ptr)->value = *((UINT *) val);*)
(*DBG:            ((__IEC_UINT_t *) ptr)->flags |= __IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        }*)
(*DBG:        case BOOL_ENUM: {*)
(*DBG:            memcpy(&((__IEC_BOOL_t *) ptr)->value, val, var_size);*)
(*DBG:            //((__IEC_BOOL_t *) ptr)->value = *((BOOL *) val);*)
(*DBG:            ((__IEC_BOOL_t *) ptr)->flags |= __IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        }*)
(*DBG:        case DWORD_ENUM: {*)
(*DBG:            memcpy(&((__IEC_DWORD_t *) ptr)->value, val, var_size);*)
(*DBG:            //((__IEC_DWORD_t *) ptr)->value = *((DWORD *) val);*)
(*DBG:            ((__IEC_DWORD_t *) ptr)->flags |= __IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        }*)
(*DBG:        case WORD_ENUM: {*)
(*DBG:            memcpy(&((__IEC_WORD_t *) ptr)->value, val, var_size);*)
(*DBG:            //((__IEC_WORD_t *) ptr)->value = *((WORD *) val);*)
(*DBG:            ((__IEC_WORD_t *) ptr)->flags |= __IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        }*)
(*DBG:        case WORD_P_ENUM: {*)
(*DBG:            memcpy(&((__IEC_WORD_p *) ptr)->fvalue, val, var_size);*)
(*DBG:            //((__IEC_WORD_p *) ptr)->fvalue = *((WORD *) val);*)
(*DBG:            ((__IEC_WORD_p *) ptr)->flags |= __IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        }*)
(*DBG:        default:*)
(*DBG:            break;*)
(*DBG:        }*)
(*DBG:    } else {*)
(*DBG:        switch (debug_vars[idx].type) {*)
(*DBG:        case UDINT_ENUM:*)
(*DBG:            ((__IEC_UDINT_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        case REAL_ENUM:*)
(*DBG:            ((__IEC_REAL_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        case UINT_ENUM:*)
(*DBG:            ((__IEC_UINT_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        case BOOL_ENUM:*)
(*DBG:            ((__IEC_BOOL_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        case DWORD_ENUM:*)
(*DBG:            ((__IEC_DWORD_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        case WORD_ENUM:*)
(*DBG:            ((__IEC_WORD_t *) ptr)->flags &= ~__IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        case WORD_P_ENUM:*)
(*DBG:            ((__IEC_WORD_p *) ptr)->flags &= ~__IEC_FORCE_FLAG;*)
(*DBG:            break;*)
(*DBG:        default:*)
(*DBG:            break;*)
(*DBG:        }*)
(*DBG:    }*)
(*DBG:}*)
(*DBG:*)
(*DBG:void swap_bytes(void *ptr, size_t size) *)
(*DBG:{*)
(*DBG:    uint8_t *bytePtr = (uint8_t *)ptr;*)
(*DBG:    size_t i;*)
(*DBG:    for (i = 0; i < size / 2; ++i) *)
(*DBG:    {*)
(*DBG:        uint8_t temp = bytePtr[i];*)
(*DBG:        bytePtr[i] = bytePtr[size - 1 - i];*)
(*DBG:        bytePtr[size - 1 - i] = temp;*)
(*DBG:    }*)
(*DBG:}*)
(*DBG:*)
(*DBG:void trace_reset(void)*)
(*DBG:{*)
(*DBG:    for (size_t i=0; i < VAR_COUNT; i++) *)
(*DBG:    {*)
(*DBG:        force_var(i, false, 0);*)
(*DBG:    }*)
(*DBG:}*)
(*DBG:*)
(*DBG:void set_trace(size_t idx, bool forced, void *val)*)
(*DBG:{*)
(*DBG:    if (idx >= 0 && idx < VAR_COUNT) *)
(*DBG:    {*)
(*DBG:        if (endianness == REVERSE_ENDIANNESS)*)
(*DBG:        {*)
(*DBG:            // Aaaaarghhhh... Stupid AVR is Big Endian.*)
(*DBG:            swap_bytes(val, get_var_size(idx));*)
(*DBG:        }*)
(*DBG:*)
(*DBG:        force_var(idx, forced, val);*)
(*DBG:    }*)
(*DBG:}*)
(*DBG:*)
(*DBG:void set_endianness(uint8_t value)*)
(*DBG:{*)
(*DBG:    if (value == SAME_ENDIANNESS || value == REVERSE_ENDIANNESS)*)
(*DBG:    {*)
(*DBG:        endianness = value;*)
(*DBG:    }*)
(*DBG:}*)
(*DBG:*)